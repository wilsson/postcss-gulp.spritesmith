'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _postcssSimpleVars = require('postcss-simple-vars');

var _postcssSimpleVars2 = _interopRequireDefault(_postcssSimpleVars);

var SEPARATOR = /\s+in\s+/;

function checkParams(params) {
  if (!SEPARATOR.test(params)) return 'Missed "in" keyword in @each';

  var _params$split$map = params.split(SEPARATOR).map(function (str) {
    return str.trim();
  });

  var _params$split$map2 = _slicedToArray(_params$split$map, 2);

  var name = _params$split$map2[0];
  var values = _params$split$map2[1];

  if (!name.match(/\$[_a-zA-Z]?\w+/)) return 'Missed variable name in @each';
  if (!values.match(/(\w+\,?\s?)+/)) return 'Missed values list in @each';

  return null;
}

function tokenize(str) {
  return _postcss2['default'].list.comma(str).map(function (str) {
    return str.replace(/^\$/, '');
  });
}

function paramsList(params) {
  var _params$split$map3 = params.split(SEPARATOR).map(tokenize);

  var _params$split$map32 = _slicedToArray(_params$split$map3, 2);

  var vars = _params$split$map32[0];
  var values = _params$split$map32[1];

  var matched = false;

  values = values.map(function (value) {
    var match = value.match(/^\((.*)\)$/);
    if (match) matched = true;
    return match ? _postcss2['default'].list.comma(match[1]) : value;
  });

  values = matched ? values : [values];

  return {
    names: values.map(function (_, i) {
      return vars[i];
    }),
    indexName: vars[values.length],
    values: values
  };
}

function processRules(rule, params) {
  rule.nodes.forEach(function (node) {

    params.values[0].forEach(function (_, i) {
      var clone = node.clone();
      var proxy = _postcss2['default'].rule({ nodes: [clone] });
      var vals = {};

      params.names.forEach(function (name, j) {
        vals[name] = params.values[j][i];
      });

      if (params.indexName) vals[params.indexName] = i;

      (0, _postcssSimpleVars2['default'])({ only: vals })(proxy);
      rule.parent.insertBefore(rule, clone);
    });
  });
}

function processEach(rule) {
  processLoop(rule);
  var params = ' ' + rule.params + ' ';
  var error = checkParams(params);
  if (error) throw rule.error(error);

  var parsedParams = paramsList(params);
  processRules(rule, parsedParams);
  rule.remove();
}

function processLoop(css) {
  css.walkAtRules('each', processEach);
};

exports['default'] = _postcss2['default'].plugin('postcss-each', function (opts) {
  opts = opts || {};
  return processLoop;
});
module.exports = exports['default'];

